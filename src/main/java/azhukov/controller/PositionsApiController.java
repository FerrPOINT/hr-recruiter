package azhukov.controller;

import azhukov.api.PositionsApi;
import azhukov.mapper.PositionMapper;
import azhukov.model.*;
import azhukov.service.PositionService;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

/**
 * Controller for position management operations. Implements autogenerated API interface from
 * OpenAPI specification.
 */
@RestController
@RequiredArgsConstructor
@Slf4j
public class PositionsApiController implements PositionsApi {

  private final PositionService positionService;
  private final PositionMapper positionMapper;

  @Override
  public ResponseEntity<Position> createPosition(PositionCreateRequest positionCreateRequest) {
    log.debug("Creating new position: {}", positionCreateRequest);

    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    String userEmail = authentication.getName();

    Position createdPosition = positionService.createPosition(positionCreateRequest, userEmail);

    return ResponseEntity.status(HttpStatus.CREATED).body(createdPosition);
  }

  @Override
  public ResponseEntity<Position> getPosition(Long id) {
    log.debug("Getting position by id: {}", id);

    Position position = positionService.getPositionById(id);

    return ResponseEntity.ok(position);
  }

  @Override
  public ResponseEntity<Position> updatePosition(
      Long id, PositionUpdateRequest positionUpdateRequest) {
    log.debug("Updating position with id: {}", id);

    Position updatedPosition = positionService.updatePosition(id, positionUpdateRequest);

    return ResponseEntity.ok(updatedPosition);
  }

  @Override
  public ResponseEntity<Position> partialUpdatePosition(
      Long id, PartialUpdatePositionRequest partialUpdatePositionRequest) {
    log.debug("Partially updating position with id: {}", id);

    Position updatedPosition =
        positionService.partialUpdatePosition(id, partialUpdatePositionRequest);

    return ResponseEntity.ok(updatedPosition);
  }

  @Override
  public ResponseEntity<GetPositionPublicLink200Response> getPositionPublicLink(String id) {
    log.debug("Getting public link for position with id: {}", id);
    Long longId = Long.parseLong(id);
    String publicLink = positionService.getPositionPublicLink(longId);
    GetPositionPublicLink200Response response = new GetPositionPublicLink200Response();
    response.setPublicLink(publicLink);
    return ResponseEntity.ok(response);
  }

  @Override
  public ResponseEntity<PositionStats> getPositionStats(Long id) {
    log.debug("Getting stats for position with id: {}", id);

    PositionStats stats = positionService.getPositionStats(id);

    return ResponseEntity.ok(stats);
  }

  @Override
  public ResponseEntity<ListPositions200Response> listPositions(
      Optional<PositionStatusEnum> status,
      Optional<String> search,
      Optional<Long> page,
      Optional<Long> size) {
    log.debug(
        "Getting positions with status={}, search={}, page={}, size={}",
        status,
        search,
        page,
        size);

    long pageNum = page.orElse(1L);
    long pageSize = size.orElse(20L);
    Pageable pageable = PageRequest.of((int) (pageNum - 1), (int) pageSize);

    Page<Position> positions =
        positionService.getPositionsPage(status.orElse(null), search.orElse(null), pageable);

    ListPositions200Response response = new ListPositions200Response();
    response.setItems(positions.getContent());
    response.setTotal((long) positions.getTotalElements());

    return ResponseEntity.ok(response);
  }
}
