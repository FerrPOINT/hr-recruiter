package azhukov.controller;

import azhukov.api.PositionsApi;
import azhukov.mapper.PositionMapper;
import azhukov.model.*;
import azhukov.service.PositionService;
import azhukov.util.PaginationUtils;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

/**
 * Controller for position management operations. Implements autogenerated API interface from
 * OpenAPI specification.
 */
@RestController
@RequiredArgsConstructor
@Slf4j
public class PositionsApiController extends BaseController implements PositionsApi {

  private final PositionService positionService;
  private final PositionMapper positionMapper;

  @Override
  @PreAuthorize("hasRole('ADMIN')")
  public ResponseEntity<Position> createPosition(PositionCreateRequest positionCreateRequest) {
    log.debug("Creating new position: {}", positionCreateRequest);

    String userEmail = getCurrentUserEmail();
    Position createdPosition = positionService.createPosition(positionCreateRequest, userEmail);

    return ResponseEntity.status(HttpStatus.CREATED).body(createdPosition);
  }

  @Override
  @PreAuthorize("hasAnyRole('ADMIN', 'CANDIDATE')")
  public ResponseEntity<Position> getPosition(Long id) {
    log.debug("Getting position by id: {}", id);

    Position position = positionService.getPositionById(id);
    return ResponseEntity.ok(position);
  }

  @Override
  @PreAuthorize("hasRole('ADMIN')")
  public ResponseEntity<Position> updatePosition(
      Long id, PositionUpdateRequest positionUpdateRequest) {
    log.debug("Updating position with id: {}", id);

    Position updatedPosition = positionService.updatePosition(id, positionUpdateRequest);
    return ResponseEntity.ok(updatedPosition);
  }

  @Override
  @PreAuthorize("hasRole('ADMIN')")
  public ResponseEntity<Position> partialUpdatePosition(
      Long id, PartialUpdatePositionRequest partialUpdatePositionRequest) {
    log.debug("Partially updating position with id: {}", id);

    Position updatedPosition =
        positionService.partialUpdatePosition(id, partialUpdatePositionRequest);

    return ResponseEntity.ok(updatedPosition);
  }

  @Override
  @PreAuthorize("hasRole('ADMIN')")
  public ResponseEntity<GetPositionPublicLink200Response> getPositionPublicLink(Long id) {
    log.debug("Getting public link for position with id: {}", id);
    String publicLink = positionService.getPositionPublicLink(id);
    GetPositionPublicLink200Response response = new GetPositionPublicLink200Response();
    response.setPublicLink(publicLink);
    return ResponseEntity.ok(response);
  }

  @Override
  @PreAuthorize("hasRole('ADMIN')")
  public ResponseEntity<PositionStats> getPositionStats(Long id) {
    log.debug("Getting stats for position with id: {}", id);

    azhukov.entity.Position position = positionService.getPositionStats(id);
    PositionStats stats = positionMapper.calculatePositionStats(position);

    return ResponseEntity.ok(stats);
  }

  @Override
  @PreAuthorize("hasRole('ADMIN')")
  public ResponseEntity<PaginatedResponse> listPositions(
      Optional<PositionStatusEnum> status,
      Optional<String> search,
      Optional<String> owner,
      Optional<Long> page,
      Optional<Long> size,
      Optional<String> sort) {
    log.debug(
        "Getting positions with status={}, search={}, owner={}, page={}, size={}, sort={}",
        status,
        search,
        owner,
        page,
        size,
        sort);

    Pageable pageable = PaginationUtils.createPageableFromOptional(page, size);
    String userEmail = getCurrentUserEmail();

    // Обрабатываем параметры поиска и владельца
    String searchTerm = search.filter(s -> !"all".equals(s) && !s.trim().isEmpty()).orElse(null);
    String ownerFilter = owner.filter(o -> !"all".equals(o) && !o.trim().isEmpty()).orElse("all");

    Page<Position> positions =
        positionService.getPositionsPage(
            status.orElse(null), searchTerm, ownerFilter, userEmail, pageable);

    PaginatedResponse response = new PaginatedResponse();
    PaginationUtils.fillPaginationFields(positions, response);

    return ResponseEntity.ok(response);
  }
}
