-- USERS
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL,
    avatar_url VARCHAR(500),
    language VARCHAR(10) DEFAULT 'ru',
    phone VARCHAR(20) UNIQUE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Индексы и уникальные ограничения для users
CREATE INDEX idx_users_created_at ON users(created_at);
CREATE INDEX idx_users_role ON users(role);

-- POSITIONS
CREATE TABLE positions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    company VARCHAR(100),
    description TEXT,
    status VARCHAR(50) NOT NULL DEFAULT 'ACTIVE',
    public_link VARCHAR(500),
    min_score DOUBLE PRECISION DEFAULT 7.0,
    avg_score DOUBLE PRECISION,
    created_by BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_positions_created_by FOREIGN KEY (created_by) REFERENCES users(id)
);

-- Индексы для positions
CREATE INDEX idx_positions_status ON positions(status);
CREATE INDEX idx_positions_created_at ON positions(created_at);
CREATE INDEX idx_positions_company ON positions(company);

-- POSITION_TEAM
CREATE TABLE position_team (
    position_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY (position_id, user_id),
    CONSTRAINT fk_position_team_position_id FOREIGN KEY (position_id) REFERENCES positions(id),
    CONSTRAINT fk_position_team_user_id FOREIGN KEY (user_id) REFERENCES users(id)
);

-- POSITION_TOPICS
CREATE TABLE position_topics (
    position_id BIGINT NOT NULL,
    topic VARCHAR(255) NOT NULL,
    PRIMARY KEY (position_id, topic),
    CONSTRAINT fk_position_topics_position_id FOREIGN KEY (position_id) REFERENCES positions(id)
);

-- QUESTIONS
CREATE TABLE questions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    position_id BIGINT NOT NULL,
    text TEXT NOT NULL,
    type VARCHAR(50) NOT NULL DEFAULT 'TEXT',
    question_order INTEGER NOT NULL DEFAULT 0,
    is_required BOOLEAN NOT NULL DEFAULT TRUE,
    max_duration INTEGER,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_questions_position_id FOREIGN KEY (position_id) REFERENCES positions(id)
);

-- Индексы для questions
CREATE INDEX idx_questions_position_id ON questions(position_id);
CREATE INDEX idx_questions_type ON questions(type);
CREATE INDEX idx_questions_order ON questions(position_id, question_order);
CREATE INDEX idx_questions_position_order ON questions(position_id, question_order);
CREATE INDEX idx_questions_created_at ON questions(created_at);

-- CANDIDATES
CREATE TABLE candidates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    position_id BIGINT NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(20),
    status VARCHAR(50) NOT NULL DEFAULT 'NEW',
    resume_url VARCHAR(500),
    cover_letter TEXT,
    experience_years INTEGER,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_candidates_position_id FOREIGN KEY (position_id) REFERENCES positions(id)
);

-- Индексы и уникальные ограничения для candidates
CREATE INDEX idx_candidates_position_id ON candidates(position_id);
CREATE INDEX idx_candidates_status ON candidates(status);
CREATE INDEX idx_candidates_email ON candidates(email);
CREATE INDEX idx_candidates_phone ON candidates(phone);
CREATE INDEX idx_candidates_created_at ON candidates(created_at);

-- CANDIDATE_SKILLS
CREATE TABLE candidate_skills (
    candidate_id BIGINT NOT NULL,
    skill VARCHAR(100) NOT NULL,
    PRIMARY KEY (candidate_id, skill),
    CONSTRAINT fk_candidate_skills_candidate_id FOREIGN KEY (candidate_id) REFERENCES candidates(id) ON DELETE CASCADE
);

CREATE INDEX idx_candidate_skills_candidate_id ON candidate_skills(candidate_id);
CREATE INDEX idx_candidate_skills_skill ON candidate_skills(skill);

-- INTERVIEWS
CREATE TABLE interviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    candidate_id BIGINT NOT NULL,
    position_id BIGINT NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'NOT_STARTED',
    result VARCHAR(50),
    started_at TIMESTAMP,
    finished_at TIMESTAMP,
    ai_score DOUBLE PRECISION,
    transcript TEXT,
    audio_url VARCHAR(500),
    video_url VARCHAR(500),
    notes TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_interviews_candidate_id FOREIGN KEY (candidate_id) REFERENCES candidates(id),
    CONSTRAINT fk_interviews_position_id FOREIGN KEY (position_id) REFERENCES positions(id)
);

-- Индексы для interviews
CREATE INDEX idx_interviews_candidate_id ON interviews(candidate_id);
CREATE INDEX idx_interviews_position_id ON interviews(position_id);
CREATE INDEX idx_interviews_status ON interviews(status);
CREATE INDEX idx_interviews_started_at ON interviews(started_at);
CREATE INDEX idx_interviews_created_at ON interviews(created_at);

-- INTERVIEW_ANSWERS
CREATE TABLE interview_answers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    interview_id BIGINT NOT NULL,
    question_id BIGINT NOT NULL,
    answer_text TEXT,
    audio_url VARCHAR(500),
    video_url VARCHAR(500),
    transcript TEXT,
    raw_transcription TEXT,
    formatted_transcription TEXT,
    duration_seconds INTEGER,
    score DOUBLE PRECISION,
    is_correct BOOLEAN,
    feedback TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_interview_answers_interview_id FOREIGN KEY (interview_id) REFERENCES interviews(id),
    CONSTRAINT fk_interview_answers_question_id FOREIGN KEY (question_id) REFERENCES questions(id)
);

CREATE INDEX idx_interview_answers_interview_id ON interview_answers(interview_id);
CREATE INDEX idx_interview_answers_question_id ON interview_answers(question_id);
CREATE INDEX idx_interview_answers_created_at ON interview_answers(created_at);

-- QUESTION_OPTIONS
CREATE TABLE question_options (
    question_id BIGINT NOT NULL,
    option_text VARCHAR(500) NOT NULL,
    PRIMARY KEY (question_id, option_text),
    CONSTRAINT fk_question_options_question_id FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

CREATE INDEX idx_question_options_question_id ON question_options(question_id);
CREATE INDEX idx_question_options_option_text ON question_options(option_text); 