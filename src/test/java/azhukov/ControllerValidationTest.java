package azhukov;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤. –í—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å *Api
 * –∏ –ø–æ–º–µ—á–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–∞–∫ @Override.
 */
public class ControllerValidationTest {

  @Test
  public void testAllControllersImplementApiInterfaces() throws IOException {
    System.out.println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤...");

    Path sourceDir = Paths.get("src/main/java");
    Path generatedApiDir = Paths.get("build/generated-sources/openapi/src/main/java/azhukov/api");
    List<String> issues = new ArrayList<>();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    long apiInterfacesCount = 0;
    if (Files.exists(generatedApiDir)) {
      apiInterfacesCount =
          Files.walk(generatedApiDir)
              .filter(path -> path.toString().endsWith(".java"))
              .filter(path -> path.getFileName().toString().endsWith("Api.java"))
              .count();
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    long controllersCount =
        Files.walk(sourceDir)
            .filter(path -> path.toString().endsWith(".java"))
            .filter(path -> path.getFileName().toString().contains("Controller"))
            .filter(
                path -> {
                  try {
                    String content = Files.readString(path);
                    return content.contains("@RestController");
                  } catch (IOException e) {
                    return false;
                  }
                })
            .count();

    System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    System.out.println("  - API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: " + apiInterfacesCount);
    System.out.println("  - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: " + controllersCount);

    if (apiInterfacesCount != controllersCount) {
      issues.add(
          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ ("
              + controllersCount
              + ") –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ ("
              + apiInterfacesCount
              + ")");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    Files.walk(sourceDir)
        .filter(path -> path.toString().endsWith(".java"))
        .filter(path -> path.getFileName().toString().contains("Controller"))
        .forEach(
            file -> {
              List<String> issuesInFile = checkController(file);
              issues.addAll(issuesInFile);
            });

    if (!issues.isEmpty()) {
      System.out.println("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö:");
      issues.forEach(issue -> System.out.println("  - " + issue));
      fail("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏: " + String.join(", ", issues));
    } else {
      System.out.println("‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!");
    }
  }

  private List<String> checkController(Path file) {
    List<String> issues = new ArrayList<>();

    try {
      String content = Files.readString(file);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @RestController –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
      if (!content.contains("@RestController")) {
        return issues; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
      }

      System.out.println("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º: " + file.getFileName());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      Pattern implementsPattern = Pattern.compile("implements\\s+(\\w+Api)");
      Matcher implementsMatch = implementsPattern.matcher(content);

      if (!implementsMatch.find()) {
        issues.add(file.getFileName() + ": –ö–ª–∞—Å—Å –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API");
        return issues;
      }

      String interfaceName = implementsMatch.group(1);
      System.out.println("  üì¶ –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " + interfaceName);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Å @Override
      // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã —Å @Override
      Pattern overridePattern = Pattern.compile("@Override");
      Matcher overrideMatcher = overridePattern.matcher(content);

      if (!overrideMatcher.find()) {
        issues.add(
            file.getFileName() + ": –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å @Override");
      }

    } catch (IOException e) {
      issues.add(file.getFileName() + ": –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
    }

    return issues;
  }

  private int findLineNumber(String content, int position) {
    String beforePosition = content.substring(0, position);
    return beforePosition.split("\n").length;
  }
}
