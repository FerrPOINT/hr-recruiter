package azhukov;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤. –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö –ø–æ–º–µ—á–µ–Ω—ã
 * –∫–∞–∫ @Override, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–∑ OpenAPI.
 */
public class ControllerValidationTest {

  @Test
  public void testAllControllersImplementApiInterfaces() throws IOException {
    System.out.println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤...");

    Path sourceDir = Paths.get("src/main/java");
    List<String> issues = new ArrayList<>();

    // –ò—â–µ–º –≤—Å–µ Java —Ñ–∞–π–ª—ã —Å "Controller" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    Files.walk(sourceDir)
        .filter(path -> path.toString().endsWith(".java"))
        .filter(path -> path.getFileName().toString().contains("Controller"))
        .forEach(
            file -> {
              List<String> issuesInFile = checkController(file);
              issues.addAll(issuesInFile);
            });

    if (!issues.isEmpty()) {
      System.out.println("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö:");
      issues.forEach(issue -> System.out.println("  - " + issue));
      fail("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏: " + String.join(", ", issues));
    } else {
      System.out.println("‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!");
    }
  }

  private List<String> checkController(Path file) {
    List<String> issues = new ArrayList<>();

    try {
      String content = Files.readString(file);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @RestController –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
      if (!content.contains("@RestController")) {
        return issues; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
      }

      System.out.println("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º: " + file.getFileName());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      Pattern implementsPattern = Pattern.compile("implements\\s+(\\w+Api)");
      Matcher implementsMatch = implementsPattern.matcher(content);

      if (!implementsMatch.find()) {
        issues.add(file.getFileName() + ": –ö–ª–∞—Å—Å –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API");
        return issues;
      }

      String interfaceName = implementsMatch.group(1);
      System.out.println("  üì¶ –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " + interfaceName);

      // –ò—â–µ–º –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      Pattern methodPattern =
          Pattern.compile(
              "(?:public|protected)\\s+(?:static\\s+)?(?:final\\s+)?(?:<[^>]+>\\s+)?(?:[\\w<>\\[\\]]+\\s+)?(\\w+)\\s*\\([^)]*\\)\\s*\\{");
      Matcher methodMatcher = methodPattern.matcher(content);

      while (methodMatcher.find()) {
        int lineNumber = findLineNumber(content, methodMatcher.start());
        String methodName = methodMatcher.group(1);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if (methodName.equals(file.getFileName().toString().replace(".java", ""))
            || methodName.equals("main")
            || methodName.equals("checkControllers")
            || methodName.equals("checkController")
            || methodName.equals("findLineNumber")) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @Override –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–æ–º
        int methodStart = methodMatcher.start();
        String beforeMethod = content.substring(0, methodStart);

        // –ò—â–µ–º @Override –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–æ–º
        String[] lines = beforeMethod.split("\n");
        boolean hasOverride = false;
        int startIndex = Math.max(0, lines.length - 10);

        for (int i = startIndex; i < lines.length; i++) {
          String line = lines[i].trim();
          if (line.equals("@Override") || line.startsWith("@Override")) {
            hasOverride = true;
            break;
          }
        }

        if (!hasOverride) {
          issues.add(
              file.getFileName()
                  + ":"
                  + lineNumber
                  + ": –ú–µ—Ç–æ–¥ '"
                  + methodName
                  + "' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ @Override");
        }
      }

    } catch (IOException e) {
      issues.add(file.getFileName() + ": –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
    }

    return issues;
  }

  private int findLineNumber(String content, int position) {
    String beforePosition = content.substring(0, position);
    return beforePosition.split("\n").length;
  }
}
